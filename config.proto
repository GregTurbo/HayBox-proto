syntax = "proto2";

import "enums.proto";

message ButtonRemap {
  optional Button physical_button = 1;
  optional Button activates = 2;
}

message SocdPair {
  optional Button button_dir1 = 1;
  optional Button button_dir2 = 2;
  optional SocdType socd_type = 3;
}

message AnalogTriggerMapping {
  optional Button button = 1;
  optional AnalogTrigger trigger = 2;
  optional uint32 value = 3;
}

message AnalogModifier {
  optional Button button = 1;
  optional AnalogAxis axis = 2;
  optional float multiplier = 3;
}

message ButtonToKeycodeMapping {
  optional Button button = 1;
  optional uint32 keycode = 2;
}

message ButtonToColorMapping {
  optional Button button = 1;
  optional uint32 color = 2;
}

message CustomModeConfig {
  optional uint32 id = 1;
  repeated Button digital_button_mappings = 2;
  repeated Button stick_direction_mappings = 3;
  repeated AnalogTriggerMapping analog_trigger_mappings = 4;
  repeated AnalogModifier modifiers = 5;
  optional uint32 stick_range = 6;
}

message KeyboardModeConfig {
  optional uint32 id = 1;
  repeated ButtonToKeycodeMapping buttons_to_keycodes = 2;
}

message GameModeConfig {
  optional GameModeId mode_id = 1;
  optional string name = 2;
  repeated SocdPair socd_pairs = 3;
  repeated ButtonRemap button_remapping = 4;
  repeated Button activation_binding = 5;
  optional uint32 custom_mode_config = 6;
  optional uint32 keyboard_mode_config = 7;
  optional uint32 rgb_config = 8;
  extensions 1000 to max;
}

message CommunicationBackendConfig {
  optional CommunicationBackendId backend_id = 1;
  optional uint32 default_mode_config = 2;
  repeated Button activation_binding = 3;
  repeated CommunicationBackendId secondary_backends = 4;
}

message RgbConfig {
  repeated ButtonToColorMapping button_colors = 1;
  optional uint32 default_color = 2;
  optional RgbAnimationId animation = 3;
  optional uint32 speed = 4;
}

message Config {
  repeated GameModeConfig game_mode_configs = 1;
  repeated CommunicationBackendConfig communication_backend_configs = 2;
  repeated CustomModeConfig custom_modes = 3;
  repeated KeyboardModeConfig keyboard_modes = 4;
  repeated RgbConfig rgb_configs = 5;
  optional uint32 default_backend_config = 6;
  optional uint32 default_usb_backend_config = 7;
  optional uint32 rgb_brightness = 8;
}

message DeviceInfo {
  optional string firmware_name = 1;
  optional string firmware_version = 2;
  optional string device_name = 3;
}